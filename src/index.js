require('dotenv').config();
const { Bot } = require('grammy');
const axios = require('axios');
const { Subscription } = require('./mongodb');
const keep_alive = require('./keep_alive');

const bot = new Bot(process.env.BOT_TOKEN);

bot.command('start', ctx => {
  const userName = ctx.from.first_name;

  const welcomMessage = `–ü—Ä–∏–≤–µ—Ç üëãüèª, ${userName}!
  
  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LariumBot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∞–Ω–∏–º–µ. ‚òïÔ∏è
  
  –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /subscribe, –≤–æ—Ç —Ç–∞–∫:
  
  /subscribe –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ
  
  –ü—Ä–∏–º–µ—Ä:
  /subscribe –≠—Ç–æ—Ç –≥–ª—É–ø—ã–π —Å–≤–∏–Ω –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –º–µ—á—Ç—É –¥–µ–≤–æ—á–∫–∏ –∑–∞–π–∫–∏
  
  –¢–æ–ª—å–∫–æ –±—É–¥—å —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –ø–∏—à–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π—Ç–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –≤ –æ–Ω–≥–æ–∏–Ω–≥–µ.

  –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–Ω–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /unsubscribe, –≤–æ—Ç —Ç–∞–∫:

  /unsubscribe –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ

  –ü—Ä–∏–º–µ—Ä:
  /unsubscribe –≠—Ç–æ—Ç –≥–ª—É–ø—ã–π —Å–≤–∏–Ω –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –º–µ—á—Ç—É –¥–µ–≤–æ—á–∫–∏ –∑–∞–π–∫–∏

  –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–Ω–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /list.

  –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /info, –≤–æ—Ç —Ç–∞–∫:

  /info –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ

  –ü—Ä–∏–º–µ—Ä:
  /info –≠—Ç–æ—Ç –≥–ª—É–ø—ã–π —Å–≤–∏–Ω –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –º–µ—á—Ç—É –¥–µ–≤–æ—á–∫–∏ –∑–∞–π–∫–∏
  
  –ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚õ©`;

  ctx.reply(welcomMessage);
});

// Func for check if anime exists
async function checkAnimeExists(animeName) {
  try {
    const response = await axios.get(`https://shikimori.one/api/animes`, {
      params: {
        search: animeName,
        limit: 1,
      },

      headers: {
        'User-Agent': 'Larium/1.1',
      },
    });

    if (response.data.length > 0) {
      const animeId = response.data[0].id;
      const animeDetails = await axios.get(
        `https://shikimori.one/api/animes/${animeId}`,
        {
          headers: {
            'User-Agent': 'Larium/1.1',
          },
        }
      );

      return animeDetails.data;
    }

    return null;
  } catch (error) {
    console.error('Error checking anime', error);

    return null;
  }
}

bot.command('info', async ctx => {
  const animeName = ctx.message.text.split(' ').slice(1).join(' ');

  try {
    const anime = await checkAnimeExists(animeName);

    if (!anime) {
      return ctx.reply('–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è.');
    }

    const genres = anime.genres
      .map(genre => genre.russian || genre.name)
      .join(', ');

    const infoMessage = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∏–º–µ "${anime.russian || anime.name}":
    
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π: ${anime.episodes || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
    –ñ–∞–Ω—Ä—ã: ${genres || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
    –û–ø–∏—Å–∞–Ω–∏–µ: ${anime.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}–†–µ–π—Ç–∏–Ω–≥: ${
      anime.score || '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞'
    }`;

    ctx.reply(infoMessage);
  } catch (error) {
    console.error('Error fetching anime info', error);
    ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

bot.command('subscribe', async ctx => {
  const animeName = ctx.message.text.split(' ').slice(1).join(' ');
  const userId = ctx.from.id;

  const anime = await checkAnimeExists(animeName);

  if (!anime) {
    return ctx.reply('–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è.');
  }

  // Check if the user is already subscribed
  const existingSubscription = await Subscription.findOne({
    userId,
    animeId: anime.id,
  });

  if (existingSubscription) {
    return ctx.reply(
      `–í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –≤—ã—Ö–æ–¥ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π –∞–Ω–∏–º–µ "${
        anime.russian || anime.name
      }".`
    );
  }

  const subscription = new Subscription({
    userId,
    animeId: anime.id,
    animeName: anime.russian || anime.name,
    lastEpisode: anime.episodes_aired || 0,
  });

  await subscription.save();
  ctx.reply(`–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–µ "${subscription.animeName}"`);
});

bot.command('unsubscribe', async ctx => {
  const animeName = ctx.message.text.split(' ').slice(1).join(' ');
  const userId = ctx.from.id;

  try {
    const result = await Subscription.findOneAndDelete({ userId, animeName });

    if (result) {
      ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–Ω–∏–º–µ "${animeName}".`);
    } else {
      ctx.reply(
        `–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞–Ω–∏–º–µ "${animeName}" –∏–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.`
      );
    }
  } catch (error) {
    console.error('Error unsubscribing from anime', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.command('list', async ctx => {
  const userId = ctx.from.id;

  try {
    const subscriptions = await Subscription.find({ userId });

    if (subscriptions.length === 0) {
      return ctx.reply('–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∏–º–µ.');
    }

    const animeList = subscriptions
      .map((sub, index) => `${index + 1}. ${sub.animeName}`)
      .join('\n');

    const message = `–í–æ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–º–∏ –∞–Ω–∏–º–µ:\n\n${animeList}`;
    ctx.reply(message);
  } catch (error) {
    console.error('Error fetching subscriptions', error);
    ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

async function checkNewEpisodes() {
  const subscription = await Subscription.find();

  for (const sub of subscription) {
    try {
      const response = await axios.get(
        `https://shikimori.one/api/animes/${sub.animeId}`,
        {
          headers: {
            'User-Agent': 'Larium/1.1',
          },
        }
      );

      const anime = response.data;

      if (anime.status === 'released') {
        await Subscription.deleteOne({ _id: sub._id });
        bot.api.sendMessage(
          sub.userId,
          `–ê–Ω–∏–º–µ "${sub.animeName}" –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.`
        );

        continue;
      }

      if (anime.episodes_aired > sub.lastEpisode) {
        const newEpisodes = anime.episodes_aired - sub.lastEpisode;
        bot.api.sendMessage(
          sub.userId,
          `–í—ã—à–ª–∞ ${newEpisodes} —Å–µ—Ä–∏—è –ø–æ –∞–Ω–∏–º–µ "${sub.animeName}"!`
        );
        sub.lastEpisode = anime.episodes_aired;
        await sub.save();
      }
    } catch (error) {
      console.error('Error checking new episodes', error);
    }
  }
}

// Schedule the func checkNewEpisodes for in 60 minutes
setInterval(checkNewEpisodes, 3600000);

bot.start();
